@page "/editOrders"
@page "/editOrders/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if(Id is null)
{
    <PageTitle>Create new Order</PageTitle>
    <h3>Create a new order</h3>
}
else
{
    <PageTitle>Edit @order.Name</PageTitle>
    <h3>Edit @order.Name</h3>
}

<EditForm Model="order" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="order.Name" class="form-control" />
    </div>
    <div>
        <label for="order-text">State</label>
        <InputText id="order-text" @bind-Value="order.State" class="form-control" />
    </div>
 @*    <div>
        <label for="order-text">State</label>
        <InputText id="order-text" @bind-Value="order.ICollection" class="form-control" />
    </div><br /> *@
    <button type="submit" class="btn btn-primary">Save</button>
    @if (Id is not null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteOrder">Delete</button>
    }

</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    Window window = new Window { Id = 1, OrderId = 1, Name = "testWindow", QuantityOfWindows = 3, TotalSubElements = 2, };
    Order order = new Order { Name="textName", State="stateText"};

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetFromJsonAsync<Order>($"api/order/{Id}");
            if (result is not null)
            {
                order = result;
            }
        }
    }

    async Task DeleteOrder()
    {
        await Http.DeleteAsync($"api/order/{Id}");
        NavigationManager.NavigateTo("/order");
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await Http.PostAsJsonAsync("api/order", order);
            NavigationManager.NavigateTo("/order");
        } else
        {
            await Http.PutAsJsonAsync($"api/order/{Id}", order);
            NavigationManager.NavigateTo("/order");
        }
    }
}